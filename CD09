#include <stdio.h>
#include <string.h>
int checkGrammar(char str[], int left, int right)
{
    if (left > right) return 0; 
    if(left==right-1&&str[left]=='a'&&str[right]=='b')
        return 1;
    if (str[left] == 'a' && str[right] == 'b')
        return checkGrammar(str, left + 1, right - 1);
    return 0; 
}
int main() 
{
    char str[100];
    printf("Enter the string: ");
    scanf("%s", str);
    int len = strlen(str);
    if (checkGrammar(str, 0, len - 1))
        printf("The string follows the grammar.\n");
    else
        printf("The string does NOT follow the grammar.\n");

    return 0;
}
10. Write a C program to construct recursive descent parsing.
Code:
#include <stdio.h>
#include <string.h>
char input[100];
int i = 0; 
int E();
int EP();
int T();
int TP();
int F();
int main() 
{
    printf("\nRecursive descent parsing for the following grammar\n");
    printf("\nE -> TE'\nE' -> +TE' | ε\nT -> FT'\nT' -> *FT' | ε\nF -> (E) | id\n");
    printf("\nEnter the string to be checked: ");
    fgets(input, 100, stdin); 
    input[strcspn(input, "\n")] = '\0'; 
    if (E())
    {
        if (input[i] == '\0') 
            printf("\nString is accepted\n");
        else
            printf("\nString is not accepted\n");
    }
    else 
    {
        printf("\nString not accepted\n");
    }
    return 0;
}
int E() 
{
    if (T()) 
    {
        return EP(); 
    }
    return 0; 
}
int EP() 
{
    if (input[i] == '+')
    {
        i++; 
        if (T())
        {
            return EP(); 
        }
        return 0;
    }
    return 1; 
}
int T() 
{
    if (F())
    {
        return TP(); 
    }
    return 0; 
}
int TP()
{
    if (input[i] == '*')
    {
        i++; 
        if (F()) {
            return TP(); 
        }
        return 0;
    }
    return 1; 
}
int F() 
{
    if (input[i] == '(') 
    {
        i++; 
        if (E())
        {
            if (input[i] == ')') 
            {
                i++; 
                return 1;
            }
        }
        return 0; 
    }
    if ((input[i] >= 'a' && input[i] <= 'z') || (input[i] >= 'A' && input[i] <= 'Z')) {
        i++; 
        return 1;
    }
    return 0; 
}
